<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[SQL经典面试题]]></title>
    <url>%2F2019%2F06%2F25%2FSQL%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98%2F</url>
    <content type="text"><![CDATA[进入fuxi库use fuxi;创建表tb_areaCREATE TABLE tb_area ( area_id int NOT NULL AUTO_INCREMENT, area_name varchar(200) NOT NULL, /* varchar(200)会根据大小分配，所以设置大点无所谓 */ str varchar(200) DEFAULT &apos;strings&apos;, /* 单引号和双引号效果一样 */ priority int NOT NULL DEFAULT 0, /* int会默认设置长度为11 */ create_time datetime DEFAULT NULL, last_edit_time datetime DEFAULT NULL, PRIMARY KEY (area_id), UNIQUE KEY UK_AREA (area_name) /* 最后一行无逗号 */ ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8; /* InnoDB是mysql默认存储引擎，AUTO_INCREMENT设置起始值，DEFAULT CHARSET=utf8 */创建表STUDENTCREATE TABLE STUDENT ( SNO VARCHAR(3) NOT NULL, SNAME VARCHAR(4) NOT NULL, SSEX VARCHAR(2) NOT NULL, SBIRTHDAY DATETIME, CLASS VARCHAR(5) );创建表COURSECREATE TABLE COURSE ( CNO VARCHAR(5) NOT NULL, CNAME VARCHAR(10) NOT NULL, TNO VARCHAR(10) NOT NULL );创建表SCORECREATE TABLE SCORE ( SNO VARCHAR(3) NOT NULL, CNO VARCHAR(5) NOT NULL, DEGREE NUMERIC(10, 1) NOT NULL );创建表TEACHERCREATE TABLE TEACHER ( TNO VARCHAR(3) NOT NULL, TNAME VARCHAR(4) NOT NULL, TSEX VARCHAR(2) NOT NULL, TBIRTHDAY DATETIME NOT NULL, PROF VARCHAR(6), DEPART VARCHAR(10) NOT NULL );插入值 STUDENT表INSERT INTO STUDENT (SNO, SNAME, SSEX, SBIRTHDAY, CLASS) VALUES (108, &apos;曾华&apos; , &apos;男&apos;, &apos;1977-09-01&apos;, 95033); INSERT INTO STUDENT (SNO, SNAME, SSEX, SBIRTHDAY, CLASS) VALUES (105, &apos;匡明&apos; , &apos;男&apos;, &apos;1975-10-02&apos;, 95031); INSERT INTO STUDENT (SNO, SNAME, SSEX, SBIRTHDAY, CLASS) VALUES (107, &apos;王丽&apos; , &apos;女&apos;, &apos;1976-01-23&apos;, 95033); INSERT INTO STUDENT (SNO, SNAME, SSEX, SBIRTHDAY, CLASS) VALUES (101, &apos;李军&apos; , &apos;男&apos;, &apos;1976-02-20&apos;, 95033); INSERT INTO STUDENT (SNO, SNAME, SSEX, SBIRTHDAY, CLASS) VALUES (109, &apos;王芳&apos; , &apos;女&apos;, &apos;1975-02-10&apos;, 95031); INSERT INTO STUDENT (SNO, SNAME, SSEX, SBIRTHDAY, CLASS) VALUES (103, &apos;陆君&apos; , &apos;男&apos;, &apos;1974-06-03&apos;, 95031);插入值COURSE表INSERT INTO COURSE (CNO, CNAME, TNO) VALUES (&apos;3-105&apos;, &apos;计算机导论&apos;, 825); INSERT INTO COURSE (CNO, CNAME, TNO) VALUES (&apos;3-245&apos;, &apos;操作系统&apos;, 804); INSERT INTO COURSE (CNO, CNAME, TNO) VALUES (&apos;6-166&apos;, &apos;数据电路&apos;, 856); INSERT INTO COURSE (CNO, CNAME, TNO) VALUES (&apos;9-888&apos;, &apos;高等数学&apos;, 100);插入值SCORE表INSERT INTO SCORE (SNO, CNO, DEGREE) VALUES (103, &apos;3-245&apos;, 86); INSERT INTO SCORE (SNO, CNO, DEGREE) VALUES (105, &apos;3-245&apos;, 75); INSERT INTO SCORE (SNO, CNO, DEGREE) VALUES (109, &apos;3-245&apos;, 68); INSERT INTO SCORE (SNO, CNO, DEGREE) VALUES (103, &apos;3-105&apos;, 92); INSERT INTO SCORE (SNO, CNO, DEGREE) VALUES (105, &apos;3-105&apos;, 88); INSERT INTO SCORE (SNO, CNO, DEGREE) VALUES (109, &apos;3-105&apos;, 76); INSERT INTO SCORE (SNO, CNO, DEGREE) VALUES (101, &apos;3-105&apos;, 64); INSERT INTO SCORE (SNO, CNO, DEGREE) VALUES (107, &apos;3-105&apos;, 91); INSERT INTO SCORE (SNO, CNO, DEGREE) VALUES (101, &apos;6-166&apos;, 85); INSERT INTO SCORE (SNO, CNO, DEGREE) VALUES (107, &apos;6-106&apos;, 79); INSERT INTO SCORE (SNO, CNO, DEGREE) VALUES (108, &apos;3-105&apos;, 78); INSERT INTO SCORE (SNO, CNO, DEGREE) VALUES (108, &apos;6-166&apos;, 81);插入值TEACHER表INSERT INTO TEACHER (TNO, TNAME, TSEX, TBIRTHDAY, PROF, DEPART) VALUES (804, &apos;李诚&apos;, &apos;男&apos;, &apos;1958-12-02&apos;, &apos;副教授&apos;, &apos;计算机系&apos;); INSERT INTO TEACHER (TNO, TNAME, TSEX, TBIRTHDAY, PROF, DEPART) VALUES (856, &apos;张旭&apos;, &apos;男&apos;, &apos;1969-03-12&apos;, &apos;讲师&apos;, &apos;电子工程系&apos;); INSERT INTO TEACHER (TNO, TNAME, TSEX, TBIRTHDAY, PROF, DEPART) VALUES (825, &apos;王萍&apos;, &apos;女&apos;, &apos;1972-05-05&apos;, &apos;助教&apos;, &apos;计算机系&apos;); INSERT INTO TEACHER (TNO, TNAME, TSEX, TBIRTHDAY, PROF, DEPART) VALUES (831, &apos;刘冰&apos;, &apos;女&apos;, &apos;1977-08-14&apos;, &apos;助教&apos;, &apos;电子工程系&apos;);– 1、 查询Student表中的所有记录的Sname、Ssex和Class列。select SNAME, SSEX, CLASS from STUDENT;– 2、 查询教师所有的单位即不重复的Depart列。select distinct DEPART from TEACHER1;– 3、 查询Student表的所有记录。select * from STUDENT;– 4、 查询Score表中成绩在60到80之间的所有记录。select * from SCORE where DEGREE &gt; 60 and DEGREE &lt; 80;– 5、 查询Score表中成绩为85，86或88的记录。select * from SCORE where DEGREE = 85 or DEGREE = 86 or DEGREE = 88;– 6、 查询Student表中“95031”班或性别为“女”的同学记录。select * from STUDENT where CLASS = &apos;95031&apos; or SSEX = &apos;女&apos;;– 7、 以Class降序查询Student表的所有记录。select * from STUDENT order by CLASS desc;– 8、 以Cno升序、Degree降序查询Score表的所有记录。select * from SCORE order by CNO asc, DEGREE desc;– 9、 查询“95031”班的学生人数。select count(*) from STUDENT where CLASS = &apos;95031&apos;;– 10、查询Score表中的最高分的学生学号和课程号。select sno, CNO from SCORE where DEGREE = ( select max(DEGREE) from SCORE );– 11、查询‘3-105’号课程的平均分。select avg(DEGREE) from SCORE where CNO = &apos;3-105&apos;;– 12、查询Score表中至少有5名学生选修的并以3开头的课程的平均分数。select avg(DEGREE), CNO from SCORE where cno like &apos;3%&apos; group by CNO having count(*) &gt; 5;– 13、查询最低分大于70，最高分小于90的Sno列。select SNO from SCORE group by SNO having min(DEGREE) &gt; 70 and max(DEGREE) &lt; 90;– 14、查询所有学生的Sname、Cno和Degree列。select SNAME, CNO, DEGREE from STUDENT, SCORE where STUDENT.SNO = SCORE.SNO;– 15、查询所有学生的Sno、Cname和Degree列。select SCORE.SNO, CNO, DEGREE from STUDENT, SCORE where STUDENT.SNO = SCORE.SNO;– 16、查询所有学生的Sname、Cname和Degree列。SELECT A.SNAME, B.CNAME, C.DEGREE FROM STUDENT A JOIN (COURSE B, SCORE C) ON A.SNO = C.SNO AND B.CNO = C.CNO;– 17、查询“95033”班所选课程的平均分。select avg(DEGREE) from SCORE where sno in (select SNO from STUDENT where CLASS = &apos;95033&apos;);– 18、假设使用如下命令建立了一个grade表：create table grade ( low numeric(3, 0), upp numeric(3), rank char(1) ); insert into grade values (90, 100, &apos;A&apos;); insert into grade values (80, 89, &apos;B&apos;); insert into grade values (70, 79, &apos;C&apos;); insert into grade values (60, 69, &apos;D&apos;); insert into grade values (0, 59, &apos;E&apos;);– 现查询所有同学的Sno、Cno和rank列。SELECT A.SNO, A.CNO, B.RANK FROM SCORE A, grade B WHERE A.DEGREE BETWEEN B.LOW AND B.UPP ORDER BY RANK;– 19、查询选修“3-105”课程的成绩高于“109”号同学成绩的所有同学的记录。select * from SCORE where CNO = &apos;3-105&apos; and DEGREE &gt; ALL ( select DEGREE from SCORE where SNO = &apos;109&apos; ); set @@global.sql_mode = &apos;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&apos;; set sql_mode = &apos;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&apos;;– 20、查询score中选学一门以上课程的同学中分数为非最高分成绩的记录select * from SCORE where DEGREE &lt; (select MAX(DEGREE) from SCORE) group by SNO having count(*) &gt; 1;– 21、查询成绩高于学号为“109”、课程号为“3-105”的成绩的所有记录。-- 同19– 22、查询和学号为108的同学同年出生的所有学生的Sno、Sname和Sbirthday列。select SNO, SNAME, SBIRTHDAY from STUDENT where year(SBIRTHDAY) = ( select year(SBIRTHDAY) from STUDENT where SNO = &apos;108&apos; );– 23、查询“张旭“教师任课的学生成绩。select * from SCORE where cno = ( select CNO from COURSE inner join TEACHER on COURSE.TNO = TEACHER.TNO and TNAME = &apos;张旭&apos; );– 24、查询选修某课程的同学人数多于5人的教师姓名。select TNAME from TEACHER where TNO = ( select TNO from COURSE where CNO = (select CNO from SCORE group by CNO having count(SNO) &gt; 5) );– 25、查询95033班和95031班全体学生的记录。select * from STUDENT where CLASS in (&apos;95033&apos;, &apos;95031&apos;);– 26、查询存在有85分以上成绩的课程Cno.select cno from SCORE group by CNO having MAX(DEGREE) &gt; 85;– 27、查询出“计算机系“教师所教课程的成绩表。select * from SCORE where CNO in (select CNO from TEACHER, COURSE where DEPART = &apos;计算机系&apos; and COURSE.TNO = TEACHER.TNO);– 28、查询“计算机系”与“电子工程系“不同职称的教师的Tname和Profselect tname, prof from TEACHER where depart = &apos;计算机系&apos; and prof not in ( select prof from TEACHER where depart = &apos;电子工程系&apos; );– 29、查询选修编号为“3-105“课程且成绩至少高于选修编号为“3-245”的同学的Cno、Sno和Degree,并按Degree从高到低次序排序。select CNO, SNO, DEGREE from SCORE where CNO = &apos;3-105&apos; and DEGREE &gt; any ( select DEGREE from SCORE where CNO = &apos;3-245&apos; ) order by DEGREE desc;– 30、查询选修编号为“3-105”且成绩高于选修编号为“3-245”课程的同学的Cno、Sno和Degree.SELECT * FROM SCORE WHERE DEGREE &gt; ALL ( SELECT DEGREE FROM SCORE WHERE CNO = &apos;3-245&apos; ) ORDER by DEGREE desc;– 31、查询所有教师和同学的name、sex和birthday.select TNAME name, TSEX sex, TBIRTHDAY birthday from TEACHER union select sname name, SSEX sex, SBIRTHDAY birthday from STUDENT;– 32、查询所有“女”教师和“女”同学的name、sex和birthday.select TNAME name, TSEX sex, TBIRTHDAY birthday from TEACHER where TSEX = &apos;女&apos; union select sname name, SSEX sex, SBIRTHDAY birthday from STUDENT where SSEX = &apos;女&apos;;– 33、查询成绩比该课程平均成绩低的同学的成绩表。SELECT A.* FROM SCORE A WHERE DEGREE &lt; (SELECT AVG(DEGREE) FROM SCORE B WHERE A.CNO = B.CNO);– 34、查询所有任课教师的Tname和Depart.select TNAME, DEPART from TEACHER a where exists(select * from COURSE b where a.TNO = b.TNO);– 35、查询所有未讲课的教师的Tname和Depart.select TNAME, DEPART from TEACHER a where tno not in (select tno from COURSE);– 36、查询至少有2名男生的班号。select CLASS from STUDENT where SSEX = &apos;男&apos; group by CLASS having count(SSEX) &gt; 1;– 37、查询Student表中不姓“王”的同学记录。select * from STUDENT where SNAME not like &quot;王%&quot;;– 38、查询Student表中每个学生的姓名和年龄。select SNAME, year(now()) - year(SBIRTHDAY) from STUDENT;– 39、查询Student表中最大和最小的Sbirthday日期值。select min(SBIRTHDAY) birthday from STUDENT union select max(SBIRTHDAY) birthday from STUDENT;– 40、以班号和年龄从大到小的顺序查询Student表中的全部记录。select * from STUDENT order by CLASS desc, year(now()) - year(SBIRTHDAY) desc;– 41、查询“男”教师及其所上的课程。select * from TEACHER, COURSE where TSEX = &apos;男&apos; and COURSE.TNO = TEACHER.TNO;– 42、查询最高分同学的Sno、Cno和Degree列。select sno, CNO, DEGREE from SCORE where DEGREE = (select max(DEGREE) from SCORE);– 43、查询和“李军”同性别的所有同学的Sname.select sname from STUDENT where SSEX = (select SSEX from STUDENT where SNAME = &apos;李军&apos;);– 44、查询和“李军”同性别并同班的同学Sname.select sname from STUDENT where (SSEX, CLASS) = (select SSEX, CLASS from STUDENT where SNAME = &apos;李军&apos;);– 45、查询所有选修“计算机导论”课程的“男”同学的成绩表select * from SCORE, STUDENT where SCORE.SNO = STUDENT.SNO and SSEX = &apos;男&apos; and CNO = ( select CNO from COURSE where CNAME = &apos;计算机导论&apos;);– 46、使用游标方式来同时查询每位同学的名字，他所选课程及成绩。declare cursor student_cursor is select S.SNO,S.SNAME,C.CNAME,SC.DEGREE as DEGREE from STUDENT S, COURSE C, SCORE SC where S.SNO=SC.SNO and SC.CNO=C.CNO; student_row student_cursor%ROWTYPE; begin open student_cursor; loop fetch student_cursor INTO student_row; exit when student_cursor%NOTFOUND; dbms_output.put_line( student_row.SNO || &apos;&apos; || student_row.SNAME|| &apos;&apos; || student_row.CNAME || &apos;&apos; || student_row.DEGREE); end loop; close student_cursor; END; / – 47、 声明触发器指令，每当有同学转换班级时执行触发器显示当前和之前所在班级。CREATE OR REPLACE TRIGGER display_class_changes AFTER DELETE OR INSERT OR UPDATE ON student FOR EACH ROW WHEN (NEW.sno &gt; 0) BEGIN dbms_output.put_line(&apos;Old class: &apos; || :OLD.class); dbms_output.put_line(&apos;New class: &apos; || :NEW.class); END; / Update student set class=95031 where sno=109;– 48、 删除已设置的触发器指令DROP TRIGGER display_class_changes;]]></content>
      <tags>
        <tag>databases</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySql面试题集锦(持续更新中)]]></title>
    <url>%2F2019%2F06%2F25%2FMySql%E9%9D%A2%E8%AF%95%E9%A2%98%E9%9B%86%E9%94%A6-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD%2F</url>
    <content type="text"><![CDATA[①如何取出每科成绩的前三名第一步 建表CREATE TABLE `test_course` ( `id` varchar(10) NOT NULL, `class` varchar(1000) DEFAULT NULL, `grade` int(100) DEFAULT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=latin1;第二步 插入数据INSERT INTO test.`test_course` VALUES (&apos;1&apos;,&apos;yuwen&apos;,&apos;100&apos;); INSERT INTO test.`test_course` VALUES (&apos;10&apos;,&apos;yingyu&apos;,&apos;16&apos;); INSERT INTO test.`test_course` VALUES (&apos;11&apos;,&apos;yingyu&apos;,&apos;85&apos;); INSERT INTO test.`test_course` VALUES (&apos;12&apos;,&apos;yingyu&apos;,&apos;95&apos;); INSERT INTO test.`test_course` VALUES (&apos;2&apos;,&apos;yuwen&apos;,&apos;80&apos;); INSERT INTO test.`test_course` VALUES (&apos;3&apos;,&apos;shuxue&apos;,&apos;60&apos;); INSERT INTO test.`test_course` VALUES (&apos;4&apos;,&apos;shuxue&apos;,&apos;100&apos;); INSERT INTO test.`test_course` VALUES (&apos;5&apos;,&apos;shuxue&apos;,&apos;95&apos;); INSERT INTO test.`test_course` VALUES (&apos;6&apos;,&apos;yuwen&apos;,&apos;85&apos;); INSERT INTO test.`test_course` VALUES (&apos;7&apos;,&apos;shuxue&apos;,&apos;16&apos;); INSERT INTO test.`test_course` VALUES (&apos;8&apos;,&apos;yuwen&apos;,&apos;15&apos;); INSERT INTO test.`test_course` VALUES (&apos;9&apos;,&apos;yingyu&apos;,&apos;15&apos;);第三步 查出每个科目的全部排名SELECT S1.*,(SELECT COUNT(1) FROM TEST.`test_course` S2 WHERE S1.CLASS = S2.CLASS AND S2.GRADE &gt; S1.GRADE)+1 AS &quot;paiming&quot; FROM TEST.`test_course` S1 ORDER BY S1.CLASS,paiming;第四步 取出每个科目的前三名SELECT S1.*,(SELECT COUNT(1) FROM TEST.`test_course` S2 WHERE S1.CLASS = S2.CLASS AND S2.GRADE &gt; S1.GRADE)+1 AS &quot;paiming&quot; FROM TEST.`test_course` S1 HAVING paiming &lt;=3 ORDER BY S1.CLASS,paiming;]]></content>
      <categories>
        <category>databases,MySQL</category>
      </categories>
      <tags>
        <tag>databases,MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HelloWorld]]></title>
    <url>%2F2019%2F06%2F23%2FhelloWorld%2F</url>
    <content type="text"><![CDATA[欢迎来到空城孤王的博客空城孤王 是一个非名校出身的半路出家的代码搬运工。 半路出家 在一个三流大学的自动化专业。大学学的都是一些计算机网络，模拟电路。整天与电路图打交道。一个意外的机会被忽悠去培训班学习Java开发。大四下学期开始面试，找工作。最终从日企和用友外包选择了用友外包。实习一个多月后感觉与自己的期望偏差太大，果断离职。面临一个尴尬的时间和地点。最后选择了数据路线做ETL开发。 ETL开发 ETL开发 百度上说是用来描述将数据从来源端经过萃取（extract）、转置（transform）、加载（load）至目的端的过程。但我做了差不多一年，只是一个数据的处理流程。 首先是数据的筛选，即入库阶段 然后是数据的处理，即表和过程的逻辑加工阶段 数据的展示，即报表，多维的展示阶段 工作总结在这差不多的一年时间了，Java开发忘了差不多了，数据库用的也不是很多。常用的还是可以写出来，难的不行。shell脚本也只是使用一些常用的命令，跑批流程也只是会用而已，反正又不需要我们来写。数据模型我们这些小弟也沾不到边。总之，以前会的现在可能还会，以前不会的现在还是不会。 下一步机会 首先要把之前欠下来的补上，包括知识和财务。然后一直鞭策自己，天道酬勤。 2019目标 一、驾照一定要拿到手，必须完成。 二、努力学习，摆脱掉这惨淡的人生。]]></content>
  </entry>
</search>
